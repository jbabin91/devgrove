{
  "name": "tag-group",
  "type": "registry:ui",
  "dependencies": ["react-aria-components", "class-variance-authority"],
  "registryDependencies": ["https://jollyui.dev/r/styles/default/field.json"],
  "files": [
    {
      "path": "ui/tag-group.tsx",
      "content": "'use client';\n\nimport { cva } from 'class-variance-authority';\nimport {\n  Button as AriaButton,\n  composeRenderProps,\n  Tag as AriaTag,\n  TagGroup as AriaTagGroup,\n  type TagGroupProps as AriaTagGroupProps,\n  TagList as AriaTagList,\n  type TagListProps as AriaTagListProps,\n  type TagProps as AriaTagProps,\n  Text,\n} from 'react-aria-components';\n\nimport { cn } from '~/libs/utils';\n\nimport { Label } from './field';\nimport { Icons } from './icons';\n\n/**\n * Represents a tag group component.\n */\nconst TagGroup = AriaTagGroup;\n\n/**\n * Renders a list of tags.\n *\n * @component\n * @template T - The type of the tag object.\n * @param {AriaTagListProps<T>} props - The props for the TagList component.\n * @param {string} [props.className] - The class name for the TagList component.\n * @returns {JSX.Element} - The rendered TagList component.\n */\nfunction TagList<T extends object>({\n  className,\n  ...props\n}: AriaTagListProps<T>): JSX.Element {\n  return (\n    <AriaTagList\n      className={composeRenderProps(className, (className) =>\n        cn(\n          'flex flex-wrap gap-2',\n          /* Empty */\n          'data-[empty]:text-sm data-[empty]:text-muted-foreground',\n          className,\n        ),\n      )}\n      {...props}\n    />\n  );\n}\n\n/**\n * Represents the configuration options for badge variants.\n *\n * @remarks\n * The `badgeVariants` object is used to define the styles and behaviors of badge variants.\n * It contains the following properties:\n * - `variants`: An object that defines the different variants of badges.\n * - `defaultVariants`: An object that specifies the default variant for badges.\n */\nconst badgeVariants = cva(\n  [\n    'inline-flex items-center gap-2 rounded-full border px-2.5 py-0.5 text-xs font-semibold ring-offset-background transition-colors',\n    /* Focus */\n    'data-[focused]:outline-none data-[focused]:ring-2 data-[focused]:ring-ring data-[focused]:ring-offset-2',\n    /* Disabled */\n    'data-[disabled]:cursor-not-allowed data-[disabled]:opacity-50',\n  ],\n  {\n    variants: {\n      variant: {\n        default: [\n          'border-transparent bg-primary text-primary-foreground',\n          /* Hover */\n          'data-[hovered]:bg-primary/80',\n        ],\n        secondary: [\n          'border-transparent bg-secondary text-secondary-foreground',\n          /* Hover */\n          'data-[hovered]:bg-secondary/80',\n        ],\n        destructive: [\n          'border-transparent bg-destructive text-destructive-foreground',\n          /* Hover */\n          'data-[hovered]:bg-destructive/80',\n        ],\n        outline: 'text-foreground',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  },\n);\n\n/**\n * Renders a tag component.\n *\n * @component\n * @param {AriaTagProps} props - The props for the tag component.\n * @param {string} [props.className] - The class name for the tag component.\n * @param {React.ReactNode} [props.children] - The children for the tag component.\n * @returns {JSX.Element} The rendered tag component.\n */\nfunction Tag({ className, children, ...props }: AriaTagProps): JSX.Element {\n  const textValue = typeof children === 'string' ? children : undefined;\n  return (\n    <AriaTag\n      className={composeRenderProps(className, (className, renderProps) =>\n        cn(\n          badgeVariants({\n            variant:\n              renderProps.selectionMode === 'none' || renderProps.isSelected\n                ? 'default'\n                : 'secondary',\n          }),\n          renderProps.allowsRemoving && 'pr-1',\n          className,\n        ),\n      )}\n      textValue={textValue}\n      {...props}\n    >\n      {composeRenderProps(children, (children, renderProps) => (\n        <>\n          {children}\n          {renderProps.allowsRemoving && (\n            <AriaButton\n              className={cn(\n                'rounded-sm opacity-70 ring-offset-background transition-opacity',\n                /* Hover */\n                'data-[hovered]:opacity-100',\n                /* Resets */\n                'focus-visible:outline-none',\n                className,\n              )}\n              slot=\"remove\"\n            >\n              <Icons.Close aria-hidden=\"true\" className=\"size-3\" />\n            </AriaButton>\n          )}\n        </>\n      ))}\n    </AriaTag>\n  );\n}\n\n/**\n * Props for the GroveTagGroup component.\n *\n * @template T - The type of items in the tag list.\n * @property {string} [label] - The label for the tag group.\n * @property {string} [description] - The description for the tag group.\n * @property {string} [errorMessage] - The error message for the tag group.\n * @property {Omit<AriaTagGroupProps, 'children'>} - The AriaTagGroupProps excluding the 'children' property.\n * @property {Pick<AriaTagListProps<T>, 'items' | 'children' | 'renderEmptyState'>} - The selected properties from AriaTagListProps.\n */\ntype GroveTagGroupProps<T> = {\n  label?: string;\n  description?: string;\n  errorMessage?: string;\n} & Omit<AriaTagGroupProps, 'children'> &\n  Pick<AriaTagListProps<T>, 'items' | 'children' | 'renderEmptyState'>;\n\n/**\n * Renders a group of tags with optional label, description, and error message.\n *\n * @component\n * @template T - The type of the items in the tag group.\n * @param {GroveTagGroupProps<T>} props - The props for the GroveTagGroup component.\n * @param {string} [props.className] - The class name for the tag group.\n * @param {string} [props.label] - The label for the tag group.\n * @param {string} [props.description] - The description for the tag group.\n * @param {string} [props.errorMessage] - The error message for the tag group.\n * @param {AriaTagListProps<T>['items']} [props.items] - The items for the tag list.\n * @param {React.ReactNode} [props.children] - The children for the tag list.\n * @returns {JSX.Element} - The rendered tag group.\n */\nfunction GroveTagGroup<T extends object>({\n  className,\n  label,\n  description,\n  errorMessage,\n  items,\n  children,\n  renderEmptyState,\n  ...props\n}: GroveTagGroupProps<T>): JSX.Element {\n  return (\n    <TagGroup className={cn('group flex flex-col gap-2', className)} {...props}>\n      <Label>{label}</Label>\n      <TagList items={items} renderEmptyState={renderEmptyState}>\n        {children}\n      </TagList>\n      {description && (\n        <Text className=\"text-sm text-muted-foreground\" slot=\"description\">\n          {description}\n        </Text>\n      )}\n      {errorMessage && (\n        <Text className=\"text-sm text-destructive\" slot=\"errorMessage\">\n          {errorMessage}\n        </Text>\n      )}\n    </TagGroup>\n  );\n}\n\nexport type { GroveTagGroupProps };\nexport { badgeVariants, GroveTagGroup, Tag, TagGroup, TagList };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
