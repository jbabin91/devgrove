{
  "name": "progress",
  "type": "registry:ui",
  "dependencies": ["react-aria-components"],
  "registryDependencies": ["https://jollyui.dev/r/styles/default/field.json"],
  "files": [
    {
      "path": "ui/progress.tsx",
      "content": "'use client';\n\nimport {\n  composeRenderProps,\n  ProgressBar as AriaProgressBar,\n  type ProgressBarProps as AriaProgressBarProps,\n} from 'react-aria-components';\n\nimport { cn } from '~/libs/utils';\n\nimport { Label, labelVariants } from './field';\n\n/**\n * Represents the props for the Progress component.\n */\ntype ProgressProps = {\n  barClassName?: string;\n  fillClassName?: string;\n} & AriaProgressBarProps;\n\n/**\n * Renders a progress bar component.\n *\n * @component\n * @param {ProgressProps} props - The props for the GroveProgressBar component.\n * @param {string} [props.className] - The class name for the progress bar.\n * @param {string} [props.barClassName] - The class name for the progress bar.\n * @param {string} [props.fillClassName] - The class name for the progress bar fill.\n * @param {React.ReactNode} [props.children] - The children to be rendered inside the progress bar.\n * @returns {JSX.Element} The rendered ProgressBar component.\n */\nfunction Progress({\n  className,\n  barClassName,\n  fillClassName,\n  children,\n  ...props\n}: ProgressProps): JSX.Element {\n  return (\n    <AriaProgressBar\n      className={composeRenderProps(className, (className) =>\n        cn('w-full', className),\n      )}\n      {...props}\n    >\n      {composeRenderProps(children, (children, renderProps) => (\n        <>\n          {children}\n          <div\n            className={cn(\n              'relative h-4 w-full overflow-hidden rounded-full bg-secondary',\n              barClassName,\n            )}\n          >\n            <div\n              className={cn(\n                'size-full flex-1 bg-primary transition-all',\n                fillClassName,\n              )}\n              style={{\n                transform: `translateX(-${100 - (renderProps.percentage ?? 0)}%)`,\n              }}\n            />\n          </div>\n        </>\n      ))}\n    </AriaProgressBar>\n  );\n}\n\n/**\n * Props for the GroveProgressBar component.\n *\n * @remarks\n * This interface extends the ProgressProps interface and adds additional props for the GroveProgressBar component.\n *\n * @public\n */\ntype GroveProgressBarProps = {\n  label?: string;\n  showValue?: boolean;\n} & ProgressProps;\n\n/**\n * Renders a GroveProgressBar component.\n *\n * @component\n * @param {GroveProgressBarProps} props - The props for the GroveProgressBar component.\n * @param {string} [props.className] - The class name for the progress bar.\n * @param {string} [props.label] - The label for the progress bar.\n * @param {boolean} [props.showValue=true] - Indicates whether to show the progress bar value.\n * @returns {JSX.Element} The rendered GroveProgressBar component.\n */\nfunction GroveProgressBar({\n  className,\n  label,\n  showValue = true,\n  ...props\n}: GroveProgressBarProps): JSX.Element {\n  return (\n    <Progress\n      className={composeRenderProps(className, (className) =>\n        cn('group flex flex-col gap-2', className),\n      )}\n      {...props}\n    >\n      {({ valueText }) => (\n        <div className=\"flex w-full justify-between\">\n          <Label>{label}</Label>\n          {showValue && <span className={labelVariants()}>{valueText}</span>}\n        </div>\n      )}\n    </Progress>\n  );\n}\n\nexport type { GroveProgressBarProps, ProgressProps };\nexport { GroveProgressBar, Progress };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
