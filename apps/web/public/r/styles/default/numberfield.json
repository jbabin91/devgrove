{
  "name": "numberfield",
  "type": "registry:ui",
  "dependencies": ["react-aria-components"],
  "registryDependencies": [
    "https://ui.dev-grove.com/r/styles/default/field.json",
    "https://ui.dev-grove.com/r/styles/default/button.json",
    "https://ui.dev-grove.com/r/styles/default/icons.json"
  ],
  "files": [
    {
      "path": "ui/numberfield.tsx",
      "content": "'use client';\n\nimport {\n  type ButtonProps as AriaButtonProps,\n  composeRenderProps,\n  Input as AriaInput,\n  type InputProps as AriaInputProps,\n  NumberField as AriaNumberField,\n  type NumberFieldProps as AriaNumberFieldProps,\n  Text,\n  type ValidationResult as AriaValidationResult,\n} from 'react-aria-components';\n\nimport { cn } from '@/lib/utils';\n\nimport { Button } from './button';\nimport { FieldError, FieldGroup, Label } from './field';\nimport { Icons } from './icons';\n\n/**\n * Represents a number field component.\n */\nconst NumberField = AriaNumberField;\n\n/**\n * Renders a number input field.\n *\n * @component\n * @param {AriaInputProps} props - The input props.\n * @param {string} [props.className] - The class name for the input field.\n * @returns {JSX.Element} The rendered NumberFieldInput component.\n */\nfunction NumberFieldInput({\n  className,\n  ...props\n}: AriaInputProps): JSX.Element {\n  return (\n    <AriaInput\n      className={composeRenderProps(className, (className) =>\n        cn(\n          'w-fit min-w-0 flex-1 border-r border-transparent bg-background pr-2 outline outline-0 placeholder:text-muted-foreground [&::-webkit-search-cancel-button]:hidden',\n          className,\n        ),\n      )}\n      {...props}\n    />\n  );\n}\n\n/**\n * Renders a set of steppers for a number field.\n *\n * @component\n * @param {React.ComponentProps<'div'>} props - The component props.\n * @param {string} [props.className] - The class name for the steppers.\n * @returns {JSX.Element} The rendered component.\n */\nfunction NumberFieldSteppers({\n  className,\n  ...props\n}: React.ComponentProps<'div'>): JSX.Element {\n  return (\n    <div\n      className={cn(\n        'absolute right-0 flex h-full flex-col border-l',\n        className,\n      )}\n      {...props}\n    >\n      <NumberFieldStepper slot=\"increment\">\n        <Icons.ChevronUp aria-hidden=\"true\" className=\"size-4\" />\n      </NumberFieldStepper>\n      <div className=\"border-b\" />\n      <NumberFieldStepper slot=\"decrement\">\n        <Icons.ChevronDown aria-hidden=\"true\" className=\"size-4\" />\n      </NumberFieldStepper>\n    </div>\n  );\n}\n\n/**\n * Renders a stepper button for a number field.\n *\n * @component\n * @param {AriaButtonProps} props - The button props.\n * @param {string} [props.className] - The class name for the stepper button.\n * @returns {JSX.Element} The rendered stepper button component.\n */\nfunction NumberFieldStepper({\n  className,\n  ...props\n}: AriaButtonProps): JSX.Element {\n  return (\n    <Button\n      className={composeRenderProps(className, (className) =>\n        cn('w-auto grow rounded-none px-0.5 text-muted-foreground', className),\n      )}\n      size={'icon'}\n      variant={'ghost'}\n      {...props}\n    />\n  );\n}\n\n/**\n * Props for the GroveNumberField component.\n *\n * @typedef {Object} GroveNumberFieldProps\n * @property {string} [label] - The label for the number field.\n * @property {string} [description] - The description for the number field.\n * @property {(string | ((validation: AriaValidationResult) => string))} [errorMessage] - The error message for the number field.\n * @property {AriaNumberFieldProps} - Additional props for the number field.\n */\ntype GroveNumberFieldProps = {\n  label?: string;\n  description?: string;\n  errorMessage?: string | ((validation: AriaValidationResult) => string);\n} & AriaNumberFieldProps;\n\n/**\n * Renders a GroveNumberField component.\n *\n * @component\n * @param {GroveNumberFieldProps} props - The props for the GroveNumberField component.\n * @param {string} [props.className] - The class name for the GroveNumberField component.\n * @param {string} [props.label] - The label for the GroveNumberField component.\n * @param {string} [props.description] - The description for the GroveNumberField component.\n * @param {string} [props.errorMessage] - The error message for the GroveNumberField component.\n * @returns {JSX.Element} - The rendered GroveNumberField component.\n */\nfunction GroveNumberField({\n  className,\n  label,\n  description,\n  errorMessage,\n  ...props\n}: GroveNumberFieldProps): JSX.Element {\n  return (\n    <NumberField\n      className={composeRenderProps(className, (className) =>\n        cn('group flex flex-col gap-2', className),\n      )}\n      {...props}\n    >\n      <Label>{label}</Label>\n      <FieldGroup>\n        <NumberFieldInput />\n        <NumberFieldSteppers />\n      </FieldGroup>\n      {description && (\n        <Text className=\"text-sm text-muted-foreground\" slot=\"description\">\n          {description}\n        </Text>\n      )}\n      <FieldError>{errorMessage}</FieldError>\n    </NumberField>\n  );\n}\n\nexport type { GroveNumberFieldProps };\nexport {\n  GroveNumberField,\n  NumberField,\n  NumberFieldInput,\n  NumberFieldStepper,\n  NumberFieldSteppers,\n};\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
