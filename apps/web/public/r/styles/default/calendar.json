{
  "name": "calendar",
  "type": "registry:ui",
  "dependencies": ["react-aria-components", "@internationalized/date"],
  "registryDependencies": [
    "https://ui.dev-grove.com/r/styles/default/button.json"
  ],
  "files": [
    {
      "path": "ui/calendar.tsx",
      "content": "'use client';\n\nimport { getLocalTimeZone, today } from '@internationalized/date';\nimport { useContext } from 'react';\nimport {\n  Button as AriaButton,\n  Calendar as AriaCalendar,\n  CalendarCell as AriaCalendarCell,\n  type CalendarCellProps as AriaCalendarCellProps,\n  CalendarGrid as AriaCalendarGrid,\n  CalendarGridBody as AriaCalendarGridBody,\n  type CalendarGridBodyProps as AriaCalendarGridBodyProps,\n  CalendarGridHeader as AriaCalendarGridHeader,\n  type CalendarGridHeaderProps as AriaCalendarGridHeaderProps,\n  type CalendarGridProps as AriaCalendarGridProps,\n  CalendarHeaderCell as AriaCalendarHeaderCell,\n  type CalendarHeaderCellProps as AriaCalendarHeaderCellProps,\n  type CalendarProps as AriaCalendarProps,\n  composeRenderProps,\n  type DateValue as AriaDateValue,\n  Heading as AriaHeading,\n  RangeCalendar as AriaRangeCalendar,\n  type RangeCalendarProps as AriaRangeCalendarProps,\n  RangeCalendarStateContext as AriaRangeCalendarStateContext,\n  Text,\n  useLocale,\n} from 'react-aria-components';\n\nimport { cn } from '~/libs/utils';\n\nimport { buttonVariants } from './button';\nimport { Icons } from './icons';\n\n/**\n * Represents a calendar component.\n */\nconst Calendar = AriaCalendar;\n\n/**\n * A component that represents a range calendar.\n */\nconst RangeCalendar = AriaRangeCalendar;\n\n/**\n * Renders the heading section of the calendar component.\n *\n * @component\n * @param {React.HTMLAttributes<HTMLElement>} props - HTML attributes for the heading element.\n * @returns {JSX.Element} The rendered heading component.\n */\nfunction CalendarHeading({\n  ...props\n}: React.HTMLAttributes<HTMLElement>): JSX.Element {\n  const { direction } = useLocale();\n\n  return (\n    <header className=\"flex w-full items-center gap-1 px-1 pb-4\" {...props}>\n      <AriaButton\n        className={cn(\n          buttonVariants({ variant: 'outline' }),\n          'size-7 bg-transparent p-0 opacity-50',\n          /* Hover */\n          'data-[hovered]:opacity-100',\n        )}\n        slot=\"previous\"\n      >\n        {direction === 'rtl' ? (\n          <Icons.ChevronRight aria-hidden=\"true\" className=\"size-4\" />\n        ) : (\n          <Icons.ChevronLeft aria-hidden=\"true\" className=\"size-4\" />\n        )}\n      </AriaButton>\n      <AriaHeading className=\"grow text-center text-sm font-medium\" />\n      <AriaButton\n        className={cn(\n          buttonVariants({ variant: 'outline' }),\n          'size-7 bg-transparent p-0 opacity-50',\n          /* Hover */\n          'data-[hovered]:opacity-100',\n        )}\n        slot=\"next\"\n      >\n        {direction === 'rtl' ? (\n          <Icons.ChevronLeft aria-hidden=\"true\" className=\"size-4\" />\n        ) : (\n          <Icons.ChevronRight aria-hidden=\"true\" className=\"size-4\" />\n        )}\n      </AriaButton>\n    </header>\n  );\n}\n\n/**\n * Renders a calendar grid component.\n *\n * @component\n * @param {AriaCalendarGridProps} props - The props for the calendar grid.\n * @param {string} [props.className] - The CSS class name for the calendar grid.\n * @returns {JSX.Element} The rendered calendar grid component.\n */\nfunction CalendarGrid({\n  className,\n  ...props\n}: AriaCalendarGridProps): JSX.Element {\n  return (\n    <AriaCalendarGrid\n      className={cn(\n        ' border-separate border-spacing-x-0 border-spacing-y-1 ',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\n/**\n * Renders the header component for the calendar grid.\n *\n * @component\n * @param {AriaCalendarGridHeaderProps} props - The props for the CalendarGridHeader component.\n * @returns {JSX.Element} The rendered CalendarGridHeader component.\n */\nfunction CalendarGridHeader({\n  ...props\n}: AriaCalendarGridHeaderProps): JSX.Element {\n  return <AriaCalendarGridHeader {...props} />;\n}\n\n/**\n * Renders a header cell for the calendar.\n *\n * @component\n * @param {AriaCalendarHeaderCellProps} props - The props for the header cell component.\n * @param {string} [props.className] - The CSS class name for the header cell component.\n * @returns {JSX.Element} The rendered header cell component.\n */\nfunction CalendarHeaderCell({\n  className,\n  ...props\n}: AriaCalendarHeaderCellProps): JSX.Element {\n  return (\n    <AriaCalendarHeaderCell\n      className={cn(\n        'w-9 rounded-md text-[0.8rem] font-normal text-muted-foreground',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\n/**\n * Renders the body of the calendar grid.\n *\n * @component\n * @param {AriaCalendarGridBodyProps} props - The props for the CalendarGridBody component.\n * @param {string} [props.className] - The CSS class name for the calendar grid body.\n * @returns {JSX.Element} The rendered calendar grid body.\n */\nfunction CalendarGridBody({\n  className,\n  ...props\n}: AriaCalendarGridBodyProps): JSX.Element {\n  return (\n    <AriaCalendarGridBody\n      className={cn('[&>tr>td]:p-0', className)}\n      {...props}\n    />\n  );\n}\n\n/**\n * Renders a cell in a calendar component.\n *\n * @component\n * @param {AriaCalendarCellProps} props - The props for the CalendarCell component.\n * @param {string} [props.className] - The CSS class name for the CalendarCell component.\n * @returns {JSX.Element} The rendered CalendarCell component.\n */\nfunction CalendarCell({\n  className,\n  ...props\n}: AriaCalendarCellProps): JSX.Element {\n  const isRange = Boolean(useContext(AriaRangeCalendarStateContext));\n  return (\n    <AriaCalendarCell\n      className={composeRenderProps(className, (className, renderProps) =>\n        cn(\n          buttonVariants({ variant: 'ghost' }),\n          'relative flex size-9 items-center justify-center p-0 text-sm font-normal',\n          /* Disabled */\n          renderProps.isDisabled && 'text-muted-foreground opacity-50',\n          /* Selected */\n          renderProps.isSelected &&\n            'bg-primary text-primary-foreground data-[focused]:bg-primary  data-[focused]:text-primary-foreground',\n          /* Hover */\n          renderProps.isHovered &&\n            renderProps.isSelected &&\n            (renderProps.isSelectionStart ||\n              renderProps.isSelectionEnd ||\n              !isRange) &&\n            'data-[hovered]:bg-primary data-[hovered]:text-primary-foreground',\n          /* Selection Start/End */\n          renderProps.isSelected &&\n            isRange &&\n            !renderProps.isSelectionStart &&\n            !renderProps.isSelectionEnd &&\n            'rounded-none bg-accent text-accent-foreground',\n          /* Outside Month */\n          renderProps.isOutsideMonth &&\n            'text-muted-foreground opacity-50 data-[selected]:bg-accent/50 data-[selected]:text-muted-foreground data-[selected]:opacity-30',\n          /* Current Date */\n          renderProps.date.compare(today(getLocalTimeZone())) === 0 &&\n            !renderProps.isSelected &&\n            'bg-accent text-accent-foreground',\n          /* Unavailable Date */\n          renderProps.isUnavailable && 'cursor-default text-destructive ',\n          renderProps.isInvalid &&\n            'bg-destructive text-destructive-foreground data-[focused]:bg-destructive data-[hovered]:bg-destructive data-[focused]:text-destructive-foreground data-[hovered]:text-destructive-foreground',\n          className,\n        ),\n      )}\n      {...props}\n    />\n  );\n}\n\n/**\n * Props for the GroveCalendar component.\n *\n * @template T - The type of the date value.\n * @property {string} [errorMessage] - An optional error message.\n * @extends {AriaCalendarProps<T>} - Inherits props from AriaCalendarProps.\n */\ntype GroveCalendarProps<T extends AriaDateValue> = {\n  errorMessage?: string;\n} & AriaCalendarProps<T>;\n\n/**\n * Renders a GroveCalendar component.\n *\n * @component\n * @template T - The type of AriaDateValue.\n * @param {GroveCalendarProps<T>} props - The props for the GroveCalendar component.\n * @param {string} [props.className] - The CSS class name for the GroveCalendar component.\n * @param {string} [props.errorMessage] - An optional error message.\n * @returns {JSX.Element} - The rendered GroveCalendar component.\n */\nfunction GroveCalendar<T extends AriaDateValue>({\n  className,\n  errorMessage,\n  ...props\n}: GroveCalendarProps<T>): JSX.Element {\n  return (\n    <Calendar\n      className={composeRenderProps(className, (className) =>\n        cn('w-fit', className),\n      )}\n      {...props}\n    >\n      <CalendarHeading />\n      <CalendarGrid>\n        <CalendarGridHeader>\n          {(day) => <CalendarHeaderCell>{day}</CalendarHeaderCell>}\n        </CalendarGridHeader>\n        <CalendarGridBody>\n          {(date) => <CalendarCell date={date} />}\n        </CalendarGridBody>\n      </CalendarGrid>\n      {errorMessage && (\n        <Text className=\"text-sm text-destructive\" slot=\"errorMessage\">\n          {errorMessage}\n        </Text>\n      )}\n    </Calendar>\n  );\n}\n\n/**\n * Props for the GroveRangeCalendar component.\n *\n * @template T - The type of the AriaDateValue.\n * @property {string} [errorMessage] - An optional error message.\n * @extends {AriaRangeCalendarProps<T>} - Extends the AriaRangeCalendarProps with the specified type.\n */\ntype GroveRangeCalendarProps<T extends AriaDateValue> = {\n  errorMessage?: string;\n} & AriaRangeCalendarProps<T>;\n\n/**\n * Renders a GroveRangeCalendar component.\n *\n * @component\n * @template T - The type of the AriaDateValue.\n * @param {GroveRangeCalendarProps<T>} props - The props for the GroveRangeCalendar component.\n * @param {string} [props.className] - The CSS class name for the GroveRangeCalendar component.\n * @param {string} [props.errorMessage] - An optional error message.\n * @returns {JSX.Element} - The rendered GroveRangeCalendar component.\n */\nfunction GroveRangeCalendar<T extends AriaDateValue>({\n  className,\n  errorMessage,\n  ...props\n}: GroveRangeCalendarProps<T>): JSX.Element {\n  return (\n    <RangeCalendar\n      className={composeRenderProps(className, (className) =>\n        cn('w-fit', className),\n      )}\n      {...props}\n    >\n      <CalendarHeading />\n      <CalendarGrid>\n        <CalendarGridHeader>\n          {(day) => <CalendarHeaderCell>{day}</CalendarHeaderCell>}\n        </CalendarGridHeader>\n        <CalendarGridBody>\n          {(date) => <CalendarCell date={date} />}\n        </CalendarGridBody>\n      </CalendarGrid>\n      {errorMessage && (\n        <Text className=\"text-sm text-destructive\" slot=\"errorMessage\">\n          {errorMessage}\n        </Text>\n      )}\n    </RangeCalendar>\n  );\n}\n\nexport type { GroveCalendarProps, GroveRangeCalendarProps };\nexport {\n  Calendar,\n  CalendarCell,\n  CalendarGrid,\n  CalendarGridBody,\n  CalendarGridHeader,\n  CalendarHeaderCell,\n  CalendarHeading,\n  GroveCalendar,\n  GroveRangeCalendar,\n  RangeCalendar,\n};\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
