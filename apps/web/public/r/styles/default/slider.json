{
  "name": "slider",
  "type": "registry:ui",
  "dependencies": ["react-aria-components"],
  "registryDependencies": [
    "https://ui.dev-grove.com/r/styles/default/field.json"
  ],
  "files": [
    {
      "path": "ui/slider.tsx",
      "content": "'use client';\n\nimport { useContext } from 'react';\nimport {\n  composeRenderProps,\n  Slider as AriaSlider,\n  SliderOutput as AriaSliderOutput,\n  type SliderOutputProps as AriaSliderOutputProps,\n  type SliderProps as AriaSliderProps,\n  SliderStateContext as AriaSliderStateContext,\n  SliderThumb as AriaSliderThumb,\n  type SliderThumbProps as AriaSliderThumbProps,\n  SliderTrack as AriaSliderTrack,\n  type SliderTrackProps as AriaSliderTrackProps,\n} from 'react-aria-components';\n\nimport { cn } from '~/libs/utils';\n\nimport { labelVariants } from './field';\n\n/**\n * Renders the output for a slider component.\n *\n * @component\n * @param {AriaSliderOutputProps} props - The props for the SliderOutput component.\n * @param {string} [props.className] - The class name for the slider output component.\n * @returns {JSX.Element} The rendered slider output component.\n */\nfunction SliderOutput({\n  className,\n  ...props\n}: AriaSliderOutputProps): JSX.Element {\n  return (\n    <AriaSliderOutput className={cn(labelVariants(), className)} {...props} />\n  );\n}\n\n/**\n * Renders a slider component.\n *\n * @component\n * @param {AriaSliderProps} props - The props for the Slider component.\n * @param {string} [props.className] - The class name for the slider component.\n * @param {'horizontal' | 'vertical'} [props.orientation='horizontal'] - The orientation of the slider.\n * @returns {JSX.Element} - The rendered Slider component.\n */\nfunction Slider({\n  className,\n  orientation = 'horizontal',\n  ...props\n}: AriaSliderProps): JSX.Element {\n  return (\n    <AriaSlider\n      className={composeRenderProps(className, (className) =>\n        cn(\n          'relative flex touch-none select-none items-center',\n          {\n            'h-full': orientation === 'vertical',\n            'w-full': orientation === 'horizontal',\n          },\n          className,\n        ),\n      )}\n      orientation={orientation}\n      {...props}\n    />\n  );\n}\n\n/**\n * Renders the track component for the slider.\n *\n * @component\n * @param {AriaSliderTrackProps} props - The props for the SliderTrack component.\n * @param {string} [props.className] - The class name for the slider track component.\n * @returns {JSX.Element} The rendered SliderTrack component.\n */\nfunction SliderTrack({\n  className,\n  ...props\n}: AriaSliderTrackProps): JSX.Element {\n  return (\n    <AriaSliderTrack\n      className={composeRenderProps(className, (className, renderProps) =>\n        cn(\n          {\n            'h-2 w-full': renderProps.orientation === 'horizontal',\n            'h-full w-2': renderProps.orientation === 'vertical',\n          },\n          'relative grow rounded-full bg-secondary',\n          /* Disabled */\n          'data-[disabled]:opacity-50',\n          className,\n        ),\n      )}\n      {...props}\n    />\n  );\n}\n\n/**\n * Renders the fill track for a slider component.\n *\n * @component\n * @param {React.HTMLAttributes<HTMLDivElement>} props - The HTML attributes for the div element.\n * @param {string} [props.className] - The class name for the fill track.\n * @returns {JSX.Element} The rendered fill track.\n */\nfunction SliderFillTrack({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>): JSX.Element {\n  const state = useContext(AriaSliderStateContext);\n  const orientation = state.orientation === 'vertical' ? 'height' : 'width';\n  return (\n    <div\n      className={cn(\n        'absolute rounded-full bg-primary',\n        {\n          'h-full': state.orientation === 'horizontal',\n          'w-full bottom-0': state.orientation === 'vertical',\n        },\n        className,\n      )}\n      style={{ [orientation]: state.getThumbPercent(0) * 100 + '%' }}\n      {...props}\n    />\n  );\n}\n\n/**\n * Renders the thumb component for the slider.\n *\n * @component\n * @param {AriaSliderThumbProps} props - The props for the SliderThumb component.\n * @param {string} [props.className] - The class name for the slider thumb component.\n * @returns {JSX.Element} The rendered thumb component.\n */\nfunction SliderThumb({\n  className,\n  ...props\n}: AriaSliderThumbProps): JSX.Element {\n  return (\n    <AriaSliderThumb\n      className={composeRenderProps(className, (className) =>\n        cn(\n          'left-1/2 top-1/2 block size-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors',\n          /* Disabled */\n          'data-[disabled]:pointer-events-none',\n          /* Focus Visible */\n          'data-[focus-visible]:outline-none data-[focus-visible]:ring-2 data-[focus-visible]:ring-ring data-[focus-visible]:ring-offset-2',\n          className,\n        ),\n      )}\n      {...props}\n    />\n  );\n}\n\nexport { Slider, SliderFillTrack, SliderOutput, SliderThumb, SliderTrack };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
