{
  "name": "grid-list",
  "type": "registry:ui",
  "dependencies": ["react-aria-components"],
  "registryDependencies": [
    "https://jollyui.dev/r/styles/new-york/checkbox.json"
  ],
  "files": [
    {
      "path": "ui/grid-list.tsx",
      "content": "'use client';\n\nimport {\n  Button as AriaButton,\n  composeRenderProps,\n  GridList as AriaGridList,\n  GridListItem as AriaGridListItem,\n  type GridListItemProps as AriaGridListItemProps,\n  type GridListProps as AriaGridListProps,\n} from 'react-aria-components';\n\nimport { cn } from '~/lib/utils';\n\nimport { Checkbox } from './checkbox';\nimport { Icons } from './icons';\n\n/**\n * Renders a grid list component.\n *\n * @component\n * @template T - The type of the grid list items.\n * @param {AriaGridListProps<T>} props - The props for the grid list.\n * @param {string} [props.className] - The class name for the grid list.\n * @returns {JSX.Element} - The rendered grid list component.\n */\nfunction GridList<T extends object>({\n  children,\n  ...props\n}: AriaGridListProps<T>): JSX.Element {\n  return (\n    <AriaGridList\n      {...props}\n      className={composeRenderProps(props.className, (className) =>\n        cn(\n          'jolly-GridList group flex flex-col gap-2 overflow-auto rounded-md border bg-popover p-1 text-popover-foreground shadow-md outline-none',\n          /* Empty */\n          'data-[empty]:p-6 data-[empty]:text-center data-[empty]:text-sm',\n          className,\n        ),\n      )}\n    >\n      {children}\n    </AriaGridList>\n  );\n}\n\n/**\n * Renders a grid list item component.\n *\n * @component\n * @param {AriaGridListItemProps} props - The props for the GridListItem component.\n * @param {string} [props.className] - The class name for the GridListItem component.\n * @param {React.ReactNode} [props.children] - The children of the GridListItem component.\n * @returns {JSX.Element} The rendered GridListItem component.\n */\nfunction GridListItem({\n  children,\n  className,\n  ...props\n}: AriaGridListItemProps): JSX.Element {\n  const textValue = typeof children === 'string' ? children : undefined;\n  return (\n    <AriaGridListItem\n      className={composeRenderProps(className, (className) =>\n        cn(\n          'jolly-GridListItem relative flex w-full cursor-default select-none items-center gap-3 rounded-sm px-2 py-1.5 text-sm outline-none',\n          /* Disabled */\n          'data-[disabled]:pointer-events-none data-[disabled]:opacity-50',\n          /* Focus Visible */\n          'data-[focus-visible]:z-10 data-[focus-visible]:outline-none data-[focus-visible]:ring-2 data-[focus-visible]:ring-ring data-[focus-visible]:ring-offset-2 data-[focus-visible]:ring-offset-background',\n          /* Hovered */\n          'data-[hovered]:bg-accent data-[hovered]:text-accent-foreground',\n          /* Selected */\n          'data-[selected]:bg-accent data-[selected]:text-accent-foreground',\n          /* Dragging */\n          'data-[dragging]:opacity-60',\n          className,\n        ),\n      )}\n      textValue={textValue}\n      {...props}\n    >\n      {composeRenderProps(children, (children, renderProps) => (\n        <>\n          {/* Add elements for drag and drop and selection. */}\n          {renderProps.allowsDragging && (\n            <AriaButton slot=\"drag\">\n              <Icons.DragHandleHorizontal className=\"size-4\" />\n            </AriaButton>\n          )}\n          {renderProps.selectionMode === 'multiple' &&\n            renderProps.selectionBehavior === 'toggle' && (\n              <Checkbox slot=\"selection\" />\n            )}\n          {children}\n        </>\n      ))}\n    </AriaGridListItem>\n  );\n}\n\nexport { GridList, GridListItem };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
