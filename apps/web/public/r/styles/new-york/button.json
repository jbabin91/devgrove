{
  "name": "button",
  "type": "registry:ui",
  "dependencies": ["react-aria-components", "class-variance-authority"],
  "files": [
    {
      "path": "ui/button.tsx",
      "content": "'use client';\n\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport {\n  Button as AriaButton,\n  type ButtonProps as AriaButtonProps,\n  composeRenderProps,\n} from 'react-aria-components';\n\nimport { cn } from '@/libs/utils';\n\nimport { Icons } from './icons';\n\n/**\n * Represents the button variants configuration.\n *\n * @remarks\n * This configuration defines the different variants of a button, such as default, destructive, outline, secondary, ghost, and link.\n * Each variant has its own set of styles and sizes.\n *\n * @public\n */\nconst buttonVariants = cva(\n  [\n    'inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors',\n    /* Disabled */\n    'data-[disabled]:pointer-events-none data-[disabled]:opacity-50 ',\n    /* Focus Visible */\n    'data-[focus-visible]:outline-none data-[focus-visible]:ring-1 data-[focus-visible]:ring-ring ',\n    /* Resets */\n    'focus-visible:outline-none',\n  ],\n  {\n    variants: {\n      variant: {\n        default:\n          'bg-primary text-primary-foreground shadow data-[hovered]:bg-primary/90',\n        destructive:\n          'bg-destructive text-destructive-foreground shadow-sm data-[hovered]:bg-destructive/90',\n        outline:\n          'border border-input bg-background shadow-sm  data-[hovered]:bg-accent data-[hovered]:text-accent-foreground',\n        secondary:\n          'bg-secondary text-secondary-foreground shadow-sm data-[hovered]:bg-secondary/80',\n        ghost: 'data-[hovered]:bg-accent data-[hovered]:text-accent-foreground',\n        link: 'text-primary underline-offset-4 data-[hovered]:underline',\n      },\n      size: {\n        default: 'h-9 px-4 py-2',\n        sm: 'h-8 rounded-md px-3 text-xs',\n        lg: 'h-10 rounded-md px-8',\n        icon: 'size-9',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  },\n);\n\n/**\n * Represents the props for the Button component.\n *\n * @remarks\n * This object defines the props for the Button component.\n *\n * @public\n */\ntype ButtonProps = {\n  isLoading?: boolean;\n  icon?: React.ReactNode;\n} & AriaButtonProps &\n  VariantProps<typeof buttonVariants>;\n\n/**\n * Renders a button component.\n *\n * @component\n * @param {ButtonProps} props - The button props.\n * @param {string} [props.className] - The class name for the button component.\n * @param {string} [props.variant] - The variant for the button component.\n * @param {string} [props.size] - The size for the button component.\n * @param {boolean} [props.isLoading] - Indicates if the button is in a loading state.\n * @param {boolean} [props.isDisabled] - Indicates if the button is disabled.\n * @param {React.ReactNode} [props.icon] - The icon for the button component.\n * @param {React.ReactNode} [props.children] - The children to render inside the button component.\n * @returns {JSX.Element} The rendered button component.\n */\nfunction Button({\n  className,\n  variant,\n  size,\n  isLoading = false,\n  isDisabled = false,\n  icon,\n  children,\n  ...props\n}: ButtonProps): JSX.Element {\n  return (\n    <AriaButton\n      className={composeRenderProps(className, (className) =>\n        cn(\n          buttonVariants({\n            variant,\n            size,\n            className,\n          }),\n        ),\n      )}\n      isDisabled={isDisabled ?? isLoading}\n      {...props}\n    >\n      {isLoading ? <Icons.Reload className=\"mr-2 size-4 animate-spin\" /> : null}\n      {!isLoading && icon ? <span className=\"mr-2\">{icon}</span> : null}\n      <>{children}</>\n    </AriaButton>\n  );\n}\n\nexport type { ButtonProps };\nexport { Button, buttonVariants };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
