{
  "name": "field",
  "type": "registry:ui",
  "dependencies": ["react-aria-components", "class-variance-authority"],
  "files": [
    {
      "path": "ui/field.tsx",
      "content": "'use client';\n\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport {\n  composeRenderProps,\n  FieldError as AriaFieldError,\n  type FieldErrorProps as AriaFieldErrorProps,\n  Group as AriaGroup,\n  type GroupProps as AriaGroupProps,\n  Label as AriaLabel,\n  type LabelProps as AriaLabelProps,\n  Text as AriaText,\n  type TextProps as AriaTextProps,\n} from 'react-aria-components';\n\nimport { cn } from '~/libs/utils';\n\n/**\n * Represents the variants for the label in the field component.\n * @typedef {string[]} LabelVariants\n */\nconst labelVariants = cva([\n  'text-sm font-medium leading-none',\n  /* Disabled */\n  'data-[disabled]:cursor-not-allowed data-[disabled]:opacity-70',\n  /* Invalid */\n  'group-data-[invalid]:text-destructive',\n]);\n\n/**\n * Renders a label component.\n *\n * @component\n * @param {Object} props - The props object.\n * @param {string} [props.className] - The class name for the label component.\n * @returns {JSX.Element} The rendered label component.\n */\nfunction Label({ className, ...props }: AriaLabelProps): JSX.Element {\n  return <AriaLabel className={cn(labelVariants(), className)} {...props} />;\n}\n\n/**\n * Renders a form description component.\n *\n * @component\n * @param {Object} props - The props for the FormDescription component.\n * @param {string} [props.className] - The class name for the component.\n * @returns {JSX.Element} The rendered FormDescription component.\n */\nfunction FormDescription({ className, ...props }: AriaTextProps): JSX.Element {\n  return (\n    <AriaText\n      className={cn('text-[0.8rem] text-muted-foreground', className)}\n      {...props}\n      slot=\"description\"\n    />\n  );\n}\n\n/**\n * Renders an error message for a field.\n *\n * @component\n * @param {AriaFieldErrorProps} props - The props for the FieldError component.\n * @param {string} [props.className] - The class name for the error message.\n * @returns {JSX.Element} The rendered FieldError component.\n */\nfunction FieldError({ className, ...props }: AriaFieldErrorProps): JSX.Element {\n  return (\n    <AriaFieldError\n      className={cn('text-[0.8rem] font-medium text-destructive', className)}\n      {...props}\n    />\n  );\n}\n\n/**\n * Represents the variants for a field group.\n *\n * @remarks\n * This object defines the different variants that can be applied to a field group.\n * The `variant` property can be set to either `'default'` or `'ghost'`.\n * The `'default'` variant includes a set of CSS classes for styling the field group.\n * The `'ghost'` variant does not include any additional CSS classes.\n *\n * @public\n */\nconst fieldGroupVariants = cva('', {\n  variants: {\n    variant: {\n      default: [\n        'relative flex h-9 w-full items-center overflow-hidden rounded-md border border-input bg-transparent px-3 py-1 text-sm shadow-sm transition-colors',\n        /* Focus Within */\n        'data-[focus-within]:outline-none data-[focus-within]:ring-1 data-[focus-within]:ring-ring',\n        /* Disabled */\n        'data-[disabled]:opacity-50',\n      ],\n      ghost: '',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\n/**\n * Represents the props for the Group component.\n *\n * @remarks\n * This object defines the props for the FieldGroup component.\n *\n * @public\n */\ntype GroupProps = {} & AriaGroupProps & VariantProps<typeof fieldGroupVariants>;\n\n/**\n * Renders a group of fields.\n *\n * @component\n * @param {GroupProps} props - The props for the FieldGroup component.\n * @param {string} [props.className] - The class name for the field group.\n * @param {string} [props.variant] - The variant for the field group.\n * @returns {JSX.Element} The rendered field group.\n */\nfunction FieldGroup({ className, variant, ...props }: GroupProps): JSX.Element {\n  return (\n    <AriaGroup\n      className={composeRenderProps(className, (className) =>\n        cn(fieldGroupVariants({ variant }), className),\n      )}\n      {...props}\n    />\n  );\n}\n\nexport type { GroupProps };\nexport {\n  FieldError,\n  FieldGroup,\n  fieldGroupVariants,\n  FormDescription,\n  Label,\n  labelVariants,\n};\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
