{
  "name": "meter",
  "type": "registry:ui",
  "dependencies": ["react-aria-components"],
  "registryDependencies": [
    "https://ui.dev-grove.com/r/styles/new-york/field.json"
  ],
  "files": [
    {
      "path": "ui/meter.tsx",
      "content": "'use client';\n\nimport {\n  composeRenderProps,\n  Meter as AriaMeter,\n  type MeterProps as AriaMeterProps,\n} from 'react-aria-components';\n\nimport { cn } from '~/libs/utils';\n\nimport { Label, labelVariants } from './field';\n\n/**\n * Represents the props for the Meter component.\n *\n * @remarks\n * This interface extends the AriaMeterProps interface and adds additional props for the Meter component.\n *\n * @public\n */\ntype MeterProps = {\n  barClassName?: string;\n  fillClassName?: string;\n} & AriaMeterProps;\n\n/**\n * Renders a Meter component.\n *\n * @component\n * @param {MeterProps} props - The props for the Meter component.\n * @param {string} [props.className] - The class name for the Meter component.\n * @param {string} [props.barClassName] - The class name for the bar component.\n * @param {string} [props.fillClassName] - The class name for the fill component.\n * @param {React.ReactNode} [props.children] - The children elements for the Meter component.\n * @returns {JSX.Element} The rendered Meter component.\n */\nfunction Meter({\n  className,\n  barClassName,\n  fillClassName,\n  children,\n  ...props\n}: MeterProps): JSX.Element {\n  return (\n    <AriaMeter\n      className={composeRenderProps(className, (className) =>\n        cn('w-full', className),\n      )}\n      {...props}\n    >\n      {composeRenderProps(children, (children, renderProps) => (\n        <>\n          {children}\n          <div\n            className={cn(\n              'relative h-2 w-full overflow-hidden rounded-full bg-primary/20',\n              barClassName,\n            )}\n          >\n            <div\n              className={cn(\n                'size-full flex-1 bg-primary transition-all',\n                fillClassName,\n              )}\n              style={{\n                transform: `translateX(-${100 - (renderProps.percentage || 0)}%)`,\n              }}\n            />\n          </div>\n        </>\n      ))}\n    </AriaMeter>\n  );\n}\n\n/**\n * Props for the GroveMeter component.\n *\n * @remarks\n * This interface extends the `MeterProps` interface and adds additional props specific to the GroveMeter component.\n *\n * @public\n */\ntype GroveMeterProps = {\n  label?: string;\n  showValue?: boolean;\n} & MeterProps;\n\n/**\n * Renders a GroveMeter component.\n *\n * @component\n * @param {GroveMeterProps} props - The props for the GroveMeter component.\n * @param {string} [props.className] - The class name for the GroveMeter component.\n * @param {string} [props.label] - The label for the GroveMeter component.\n * @param {boolean} [props.showValue=true] - Whether to show the value of the GroveMeter component.\n * @returns {JSX.Element} The rendered GroveMeter component.\n */\nfunction GroveMeter({\n  label,\n  className,\n  showValue = true,\n  ...props\n}: GroveMeterProps): JSX.Element {\n  return (\n    <Meter\n      className={composeRenderProps(className, (className) =>\n        cn('group flex flex-col gap-2', className),\n      )}\n      {...props}\n    >\n      {({ valueText }) => (\n        <div className=\"flex w-full justify-between\">\n          <Label>{label}</Label>\n          {showValue && <span className={labelVariants()}>{valueText}</span>}\n        </div>\n      )}\n    </Meter>\n  );\n}\n\nexport type { GroveMeterProps, MeterProps };\nexport { GroveMeter, Meter };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
