{
  "name": "dialog",
  "type": "registry:ui",
  "dependencies": ["react-aria-components", "class-variance-authority"],
  "files": [
    {
      "path": "ui/dialog.tsx",
      "content": "'use client';\n\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport {\n  Button as AriaButton,\n  composeRenderProps,\n  Dialog as AriaDialog,\n  type DialogProps as AriaDialogProps,\n  DialogTrigger as AriaDialogTrigger,\n  Heading as AriaHeading,\n  type HeadingProps as AriaHeadingProps,\n  Modal as AriaModal,\n  ModalOverlay as AriaModalOverlay,\n  type ModalOverlayProps as AriaModalOverlayProps,\n} from 'react-aria-components';\n\nimport { cn } from '~/lib/utils';\n\nimport { Icons } from './icons';\n\n/**\n * Represents the variants for the sheet component.\n *\n * @remarks\n * This object defines the different variants for the sheet component, such as the position and animation styles.\n */\nconst sheetVariants = cva(\n  [\n    'fixed z-50 gap-4 bg-background shadow-lg transition ease-in-out',\n    /* Entering */\n    'data-[entering]:duration-500 data-[entering]:animate-in',\n    /* Exiting */\n    'data-[exiting]:duration-300  data-[exiting]:animate-out',\n  ],\n  {\n    variants: {\n      side: {\n        top: 'inset-x-0 top-0 border-b data-[entering]:slide-in-from-top data-[exiting]:slide-out-to-top',\n        bottom:\n          'inset-x-0 bottom-0 border-t data-[entering]:slide-in-from-bottom data-[exiting]:slide-out-to-bottom',\n        left: 'inset-y-0 left-0 h-full w-3/4 border-r data-[entering]:slide-in-from-left data-[exiting]:slide-out-to-left sm:max-w-sm',\n        right:\n          'inset-y-0 right-0 h-full w-3/4  border-l data-[entering]:slide-in-from-right data-[exiting]:slide-out-to-right sm:max-w-sm',\n      },\n    },\n  },\n);\n\n/**\n * Represents a dialog component.\n */\nconst Dialog = AriaDialog;\n\n/**\n * A component that triggers a dialog.\n */\nconst DialogTrigger = AriaDialogTrigger;\n\n/**\n * Renders a dialog overlay component.\n *\n * @component\n * @param {Object} props - The component props.\n * @param {string} [props.className] - The class name for the overlay.\n * @param {boolean} [props.isDismissable=true] - Indicates if the overlay is dismissable.\n * @returns {JSX.Element} The rendered dialog overlay.\n */\nfunction DialogOverlay({\n  className,\n  isDismissable = true,\n  ...props\n}: AriaModalOverlayProps): JSX.Element {\n  return (\n    <AriaModalOverlay\n      className={composeRenderProps(className, (className) =>\n        cn(\n          'fixed inset-0 z-50 bg-black/80',\n          /* Exiting */\n          'data-[exiting]:duration-300 data-[exiting]:animate-out data-[exiting]:fade-out-0',\n          /* Entering */\n          'data-[entering]:animate-in data-[entering]:fade-in-0',\n          className,\n        ),\n      )}\n      isDismissable={isDismissable}\n      {...props}\n    />\n  );\n}\n\n/**\n * Props for the DialogContent component.\n */\ntype DialogContentProps = {\n  children?: AriaDialogProps['children'];\n  role?: AriaDialogProps['role'];\n  closeButton?: boolean;\n} & Omit<React.ComponentProps<typeof AriaModal>, 'children'> &\n  VariantProps<typeof sheetVariants>;\n\n/**\n * Renders the content of a dialog.\n *\n * @component\n * @param {DialogContentProps} props - The props for the DialogContent component.\n * @param {string} [props.className] - The class name for the DialogContent component.\n * @param {React.ReactNode} [props.children] - The children of the DialogContent component.\n * @param {string} [props.side] - The side of the DialogContent component.\n * @param {string} [props.role] - The role of the DialogContent component.\n * @param {boolean} [props.closeButton=true] - Indicates if the DialogContent component has a close button.\n * @returns {JSX.Element} The rendered DialogContent component.\n */\nfunction DialogContent({\n  className,\n  children,\n  side,\n  role,\n  closeButton = true,\n  ...props\n}: DialogContentProps): JSX.Element {\n  return (\n    <AriaModal\n      className={composeRenderProps(className, (className) =>\n        cn(\n          side\n            ? sheetVariants({ side, className: 'h-full p-6' })\n            : 'fixed left-[50vw] top-1/2 z-50 w-full max-w-lg -translate-x-1/2 -translate-y-1/2 border bg-background p-6 shadow-lg duration-200 data-[exiting]:duration-300 data-[entering]:animate-in data-[exiting]:animate-out data-[entering]:fade-in-0 data-[exiting]:fade-out-0 data-[entering]:zoom-in-95 data-[exiting]:zoom-out-95 data-[entering]:slide-in-from-left-1/2 data-[entering]:slide-in-from-top-[48%] data-[exiting]:slide-out-to-left-1/2 data-[exiting]:slide-out-to-top-[48%] sm:rounded-lg md:w-full',\n          className,\n        ),\n      )}\n      {...props}\n    >\n      <AriaDialog\n        className={cn(!side && 'grid h-full gap-4', 'h-full outline-none')}\n        role={role}\n      >\n        {composeRenderProps(children, (children, renderProps) => (\n          <>\n            {children}\n            {closeButton && (\n              <AriaButton\n                className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity data-[disabled]:pointer-events-none data-[entering]:bg-accent data-[entering]:text-muted-foreground data-[hovered]:opacity-100 data-[focused]:outline-none data-[focused]:ring-2 data-[focused]:ring-ring data-[focused]:ring-offset-2\"\n                onPress={renderProps.close}\n              >\n                <Icons.Cross2 className=\"size-4\" />\n                <span className=\"sr-only\">Close</span>\n              </AriaButton>\n            )}\n          </>\n        ))}\n      </AriaDialog>\n    </AriaModal>\n  );\n}\n\n/**\n * Renders the header of a dialog component.\n *\n * @component\n * @param {React.HTMLAttributes<HTMLDivElement>} props - The HTML attributes for the div element.\n * @param {string} [props.className] - The class name for the div element.\n * @returns {JSX.Element} The rendered header component.\n */\nfunction DialogHeader({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>): JSX.Element {\n  return (\n    <div\n      className={cn(\n        'flex flex-col space-y-1.5 text-center sm:text-left',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\n/**\n * Renders the footer of a dialog component.\n *\n * @component\n * @param {React.HTMLAttributes<HTMLDivElement>} props - The HTML attributes for the div element.\n * @param {string} [props.className] - The class name for the div element.\n * @returns {JSX.Element} The rendered footer component.\n */\nfunction DialogFooter({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>): JSX.Element {\n  return (\n    <div\n      className={cn(\n        'flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\n/**\n * Renders the title for the dialog.\n *\n * @component\n * @param {AriaHeadingProps} props - The props for the title component.\n * @param {string} [props.className] - The class name for the title component.\n * @returns {JSX.Element} The rendered title component.\n */\nfunction DialogTitle({ className, ...props }: AriaHeadingProps): JSX.Element {\n  return (\n    <AriaHeading\n      className={cn(\n        'text-lg font-semibold leading-none tracking-tight',\n        className,\n      )}\n      slot=\"title\"\n      {...props}\n    />\n  );\n}\n\n/**\n * Renders a description for a dialog.\n *\n * @component\n * @param {React.HTMLAttributes<HTMLParagraphElement>} props - The HTML attributes for the <p> element.\n * @param {string} [props.className] - The class name for the <p> element.\n * @returns {JSX.Element} The rendered description component.\n */\nfunction DialogDescription({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLParagraphElement>): JSX.Element {\n  return (\n    <p\n      className={cn(\n        'flex flex-col space-y-1.5 text-center sm:text-left',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nexport type { DialogContentProps };\nexport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogOverlay,\n  DialogTitle,\n  DialogTrigger,\n};\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
