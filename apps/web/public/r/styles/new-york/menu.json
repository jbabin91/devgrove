{
  "name": "menu",
  "type": "registry:ui",
  "dependencies": ["react-aria-components", "class-variance-authority"],
  "registryDependencies": [
    "https://jollyui.dev/r/styles/new-york/button.json",
    "https://jollyui.dev/r/styles/new-york/list-box.json",
    "https://jollyui.dev/r/styles/new-york/select.json"
  ],
  "files": [
    {
      "path": "ui/menu.tsx",
      "content": "'use client';\n\nimport { type VariantProps } from 'class-variance-authority';\nimport {\n  composeRenderProps,\n  Header as AriaHeader,\n  Keyboard as AriaKeyboard,\n  Menu as AriaMenu,\n  MenuItem as AriaMenuItem,\n  type MenuItemProps as AriaMenuItemProps,\n  type MenuProps as AriaMenuProps,\n  MenuTrigger as AriaMenuTrigger,\n  type MenuTriggerProps as AriaMenuTriggerProps,\n  type PopoverProps,\n  Separator as AriaSeparator,\n  type SeparatorProps as AriaSeparatorProps,\n  SubmenuTrigger as AriaSubmenuTrigger,\n} from 'react-aria-components';\n\nimport { cn } from '~/libs/utils';\n\nimport { Button, type buttonVariants } from './button';\nimport { Icons } from './icons';\nimport { ListBoxCollection, ListBoxSection } from './list-box';\nimport { SelectPopover } from './select';\n\n/**\n * Represents a menu trigger component.\n */\nconst MenuTrigger = AriaMenuTrigger;\n\n/**\n * Represents a trigger for a submenu in the menu.\n */\nconst MenuSubTrigger = AriaSubmenuTrigger;\n\n/**\n * Represents a menu section.\n */\nconst MenuSection = ListBoxSection;\n\n/**\n * Represents a collection of menu items.\n */\nconst MenuCollection = ListBoxCollection;\n\n/**\n * Renders a menu popover component.\n *\n * @component\n * @param {PopoverProps} props - The popover component props.\n * @param {string} [props.className] - The class name for the menu popover component.\n * @returns {JSX.Element} The rendered menu popover component.\n */\nfunction MenuPopover({ className, ...props }: PopoverProps): JSX.Element {\n  return (\n    <SelectPopover\n      className={composeRenderProps(className, (className) =>\n        cn('w-auto', className),\n      )}\n      {...props}\n    />\n  );\n}\n\n/**\n * Renders a menu component.\n *\n * @component\n * @template T - The type of the menu items.\n * @param {AriaMenuProps<T>} props - The props for the menu component.\n * @param {string} [props.className] - The class name for the menu component.\n * @returns {JSX.Element} The rendered menu component.\n */\nfunction Menu<T extends object>({\n  className,\n  ...props\n}: AriaMenuProps<T>): JSX.Element {\n  return (\n    <AriaMenu\n      className={cn(\n        'max-h-[inherit] overflow-auto rounded-md p-1 outline outline-0 [clip-path:inset(0_0_0_0_round_calc(var(--radius)-2px))]',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\n/**\n * Renders a menu item component.\n *\n * @component\n * @param {AriaMenuItemProps} props - The props for the menu item.\n * @param {string} [props.className] - The class name for the menu item.\n * @param {React.ReactNode} [props.children] - The children of the menu item.\n * @returns {JSX.Element} The rendered menu item.\n */\nfunction MenuItem({\n  children,\n  className,\n  ...props\n}: AriaMenuItemProps): JSX.Element {\n  return (\n    <AriaMenuItem\n      className={composeRenderProps(className, (className) =>\n        cn(\n          'relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors',\n          /* Disabled */\n          'data-[disabled]:pointer-events-none data-[disabled]:opacity-50',\n          /* Focused */\n          'data-[focused]:bg-accent data-[focused]:text-accent-foreground ',\n          /* Selection Mode */\n          'data-[selection-mode]:pl-8',\n          className,\n        ),\n      )}\n      textValue={\n        props.textValue ?? (typeof children === 'string' ? children : undefined)\n      }\n      {...props}\n    >\n      {composeRenderProps(children, (children, renderProps) => (\n        <>\n          <span className=\"absolute left-2 flex size-4 items-center justify-center\">\n            {renderProps.isSelected && (\n              <>\n                {renderProps.selectionMode == 'single' && (\n                  <Icons.DotFilled className=\"size-4 fill-current\" />\n                )}\n                {renderProps.selectionMode == 'multiple' && (\n                  <Icons.Check className=\"size-4\" />\n                )}\n              </>\n            )}\n          </span>\n\n          {children}\n\n          {renderProps.hasSubmenu && (\n            <Icons.ChevronRight className=\"ml-auto size-4\" />\n          )}\n        </>\n      ))}\n    </AriaMenuItem>\n  );\n}\n\n/**\n * Props for the MenuHeader component.\n *\n * @typedef {Object} MenuHeaderProps\n * @property {boolean} [inset] - Indicates if the menu header should have an inset style.\n * @property {boolean} [separator] - Indicates if the menu header should have a separator.\n * @property {React.ComponentProps<typeof AriaHeader>} - Additional props for the AriaHeader component.\n */\ntype MenuHeaderProps = {\n  inset?: boolean;\n  separator?: boolean;\n} & React.ComponentProps<typeof AriaHeader>;\n\n/**\n * Renders the header component for the menu.\n *\n * @param {MenuHeaderProps} props - The props for the menu header component.\n * @param {string} [props.className] - The class name for the menu header component.\n * @param {boolean} [props.inset] - Indicates if the menu header should have an inset style.\n * @param {boolean} [props.separator=true] - Indicates if the menu header should have a separator.\n * @returns {JSX.Element} The rendered header component.\n */\nfunction MenuHeader({\n  className,\n  inset,\n  separator = true,\n  ...props\n}: MenuHeaderProps): JSX.Element {\n  return (\n    <AriaHeader\n      className={cn(\n        'px-3 py-1.5 text-sm font-semibold',\n        inset && 'pl-8',\n        separator && '-mx-1 mb-1 border-b border-b-border pb-2.5',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\n/**\n * Renders a separator for a menu.\n *\n * @component\n * @param {AriaSeparatorProps} props - The props for the separator.\n * @param {string} [props.className] - The class name for the separator.\n * @returns {JSX.Element} The rendered separator component.\n */\nfunction MenuSeparator({\n  className,\n  ...props\n}: AriaSeparatorProps): JSX.Element {\n  return (\n    <AriaSeparator\n      className={cn('-mx-1 my-1 h-px bg-muted', className)}\n      {...props}\n    />\n  );\n}\n\n/**\n * Renders a keyboard component for the menu.\n *\n * @component\n * @param {React.ComponentProps<typeof AriaKeyboard>} props - The props for the MenuKeyboard component.\n * @param {string} [props.className] - The class name for the MenuKeyboard component.\n * @returns {JSX.Element} The rendered MenuKeyboard component.\n */\nfunction MenuKeyboard({\n  className,\n  ...props\n}: React.ComponentProps<typeof AriaKeyboard>): JSX.Element {\n  return (\n    <AriaKeyboard\n      className={cn('ml-auto text-xs tracking-widest opacity-60', className)}\n      {...props}\n    />\n  );\n}\n\n/**\n * Props for the GroveMenu component.\n *\n * @template T - The type of the menu items.\n *\n * @property {string} [label] - The label for the menu.\n * @property {AriaMenuProps<T>} - The ARIA menu props.\n * @property {VariantProps<typeof buttonVariants>} - The variant props for the button.\n * @property {Omit<AriaMenuTriggerProps, 'children'>} - The ARIA menu trigger props.\n */\ntype GroveMenuProps<T> = {\n  label?: string;\n} & AriaMenuProps<T> &\n  VariantProps<typeof buttonVariants> &\n  Omit<AriaMenuTriggerProps, 'children'>;\n\n/**\n * Renders a GroveMenu component.\n *\n * @component\n * @template T - The type of object.\n * @param {GroveMenuProps<T>} props - The props for the GroveMenu component.\n * @param {string} [props.label] - The label for the GroveMenu component.\n * @param {React.ReactNode} [props.children] - The children for the GroveMenu component.\n * @param {VariantProps<typeof buttonVariants>} [props.variant] - The variant props for the button.\n * @param {string} [props.size] - The size of the button.\n * @returns {JSX.Element} - The rendered GroveMenu component.\n */\nfunction GroveMenu<T extends object>({\n  label,\n  children,\n  variant,\n  size,\n  ...props\n}: GroveMenuProps<T>): JSX.Element {\n  return (\n    <MenuTrigger {...props}>\n      <Button size={size} variant={variant}>\n        {label}\n      </Button>\n      <MenuPopover className=\"min-w-[--trigger-width]\">\n        <Menu {...props}>{children}</Menu>\n      </MenuPopover>\n    </MenuTrigger>\n  );\n}\n\nexport type { GroveMenuProps, MenuHeaderProps };\nexport {\n  GroveMenu,\n  Menu,\n  MenuCollection,\n  MenuHeader,\n  MenuItem,\n  MenuKeyboard,\n  MenuPopover,\n  MenuSection,\n  MenuSeparator,\n  MenuSubTrigger,\n  MenuTrigger,\n};\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
