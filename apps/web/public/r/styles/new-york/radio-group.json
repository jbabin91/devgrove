{
  "name": "radio-group",
  "type": "registry:ui",
  "dependencies": ["react-aria-components"],
  "registryDependencies": [
    "https://ui.dev-grove.com/r/styles/new-york/field.json"
  ],
  "files": [
    {
      "path": "ui/radio-group.tsx",
      "content": "'use client';\n\nimport {\n  composeRenderProps,\n  Radio as AriaRadio,\n  RadioGroup as AriaRadioGroup,\n  type RadioGroupProps as AriaRadioGroupProps,\n  type RadioProps as AriaRadioProps,\n  Text,\n  type ValidationResult as AriaValidationResult,\n} from 'react-aria-components';\n\nimport { cn } from '@/libs/utils';\n\nimport { FieldError, Label, labelVariants } from './field';\nimport { Icons } from './icons';\n\n/**\n * Renders a radio group component.\n *\n * @component\n * @param {GroveRadioGroupProps} props - The props for the GroveRadioGroup component.\n * @param {string} [props.className] - The class name for the radio group component.\n * @param {'horizontal' | 'vertical'} [props.orientation='vertical'] - The orientation of the radio group. Can be 'vertical' or 'horizontal'.\n * @returns {JSX.Element} The rendered GroveRadioGroup component.\n */\nfunction RadioGroup({\n  className,\n  orientation = 'vertical',\n  ...props\n}: AriaRadioGroupProps): JSX.Element {\n  return (\n    <AriaRadioGroup\n      className={composeRenderProps(className, (className) =>\n        cn(\n          {\n            'grid gap-2': orientation === 'vertical',\n            'flex items-center gap-2': orientation === 'horizontal',\n          },\n          className,\n        ),\n      )}\n      {...props}\n    />\n  );\n}\n\n/**\n * Renders a radio button component.\n *\n * @component\n * @param {AriaRadioProps} props - Additional props for the radio button.\n * @param {string} [props.className] - The class name for the radio button.\n * @param {React.ReactNode} [props.children] - The children elements for the radio button.\n * @returns {JSX.Element} The rendered radio button component.\n */\nfunction Radio({ className, children, ...props }: AriaRadioProps): JSX.Element {\n  return (\n    <AriaRadio\n      className={composeRenderProps(className, (className) =>\n        cn(\n          'group flex items-center gap-x-2',\n          /* Disabled */\n          'data-[disabled]:cursor-not-allowed data-[disabled]:opacity-70',\n          labelVariants,\n          className,\n        ),\n      )}\n      {...props}\n    >\n      {composeRenderProps(children, (children, renderProps) => (\n        <>\n          <span\n            className={cn(\n              'flex aspect-square size-4 items-center justify-center rounded-full border border-primary text-primary shadow',\n              /* Focus */\n              'group-data-[focused]:outline-none',\n              /* Focus Visible */\n              'group-data-[focus-visible]:ring-1 group-data-[focus-visible]:ring-ring',\n              /* Disabled */\n              'group-data-[disabled]:cursor-not-allowed group-data-[disabled]:opacity-50',\n              /* Invalid */\n              'group-data-[invalid]:border-destructive',\n            )}\n          >\n            {renderProps.isSelected && (\n              <Icons.Check className=\"size-3.5 fill-primary\" />\n            )}\n          </span>\n          {children}\n        </>\n      ))}\n    </AriaRadio>\n  );\n}\n\n/**\n * Props for the GroveRadioGroup component.\n *\n * @typedef {Object} GroveRadioGroupProps\n * @property {string} [label] - The label for the radio group.\n * @property {string} [description] - The description for the radio group.\n * @property {string | ((validation: AriaValidationResult) => string)} [errorMessage] - The error message for the radio group.\n * @property {AriaRadioGroupProps} [AriaRadioGroupProps] - Additional props for the AriaRadioGroup component.\n */\ntype GroveRadioGroupProps = {\n  label?: string;\n  description?: string;\n  errorMessage?: string | ((validation: AriaValidationResult) => string);\n} & AriaRadioGroupProps;\n\n/**\n * Renders a radio group component.\n *\n * @component\n * @param {GroveRadioGroupProps} props - The props for the radio group component.\n * @param {string} [props.label] - The label for the radio group component.\n * @param {string} [props.description] - The description for the radio group component.\n * @param {string | ((validation: AriaValidationResult) => string)} [props.errorMessage] - The error message for the radio group component.\n * @param {string} [props.className] - The class name for the radio group component.\n * @param {React.ReactNode} [props.children] - The children elements for the radio group component.\n * @returns {JSX.Element} The rendered radio group component.\n */\nfunction GroveRadioGroup({\n  label,\n  description,\n  className,\n  errorMessage,\n  children,\n  ...props\n}: GroveRadioGroupProps): JSX.Element {\n  return (\n    <RadioGroup\n      className={composeRenderProps(className, (className) =>\n        cn('group flex flex-col gap-2', className),\n      )}\n      {...props}\n    >\n      {composeRenderProps(children, (children) => (\n        <>\n          <Label>{label}</Label>\n          {children}\n          {description && (\n            <Text className=\"text-sm text-muted-foreground\" slot=\"description\">\n              {description}\n            </Text>\n          )}\n          <FieldError>{errorMessage}</FieldError>\n        </>\n      ))}\n    </RadioGroup>\n  );\n}\n\nexport type { GroveRadioGroupProps };\nexport { GroveRadioGroup, Radio, RadioGroup };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
