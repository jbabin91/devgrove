{
  "name": "textfield",
  "type": "registry:ui",
  "dependencies": ["react-aria-components"],
  "registryDependencies": [
    "https://ui.dev-grove.com/r/styles/new-york/field.json"
  ],
  "files": [
    {
      "path": "ui/textfield.tsx",
      "content": "'use client';\n\nimport {\n  composeRenderProps,\n  Input as AriaInput,\n  type InputProps as AriaInputProps,\n  Text,\n  TextArea as AriaTextArea,\n  type TextAreaProps as AriaTextAreaProps,\n  TextField as AriaTextField,\n  type TextFieldProps as AriaTextFieldProps,\n  type ValidationResult as AriaValidationResult,\n} from 'react-aria-components';\n\nimport { cn } from '~/libs/utils';\n\nimport { FieldError, Label } from './field';\n\n/**\n * Represents a text field component.\n */\nconst TextField = AriaTextField;\n\n/**\n * Renders an input component.\n *\n * @component\n * @param {AriaInputProps} props - The input component props.\n * @param {string} [props.className] - The class name for the input component.\n * @returns {JSX.Element} The rendered input component.\n */\nfunction Input({ className, ...props }: AriaInputProps): JSX.Element {\n  return (\n    <AriaInput\n      className={composeRenderProps(className, (className) =>\n        cn(\n          'flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground',\n          /* Disabled */\n          'data-[disabled]:cursor-not-allowed data-[disabled]:opacity-50',\n          /* Focused */\n          'data-[focused]:outline-none data-[focused]:ring-1 data-[focused]:ring-ring',\n          /* Resets */\n          'focus-visible:outline-none',\n          className,\n        ),\n      )}\n      {...props}\n    />\n  );\n}\n\n/**\n * Renders a TextArea component.\n *\n * @component\n * @param {AriaTextAreaProps} props - The props for the TextArea component.\n * @param {string} [props.className] - The class name for the TextArea component.\n * @returns {JSX.Element} The rendered TextArea component.\n */\nfunction TextArea({ className, ...props }: AriaTextAreaProps): JSX.Element {\n  return (\n    <AriaTextArea\n      className={composeRenderProps(className, (className) =>\n        cn(\n          'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground',\n          /* Focused */\n          'data-[focused]:outline-none data-[focused]:ring-2 data-[focused]:ring-ring data-[focused]:ring-offset-2',\n          /* Disabled */\n          'data-[disabled]:cursor-not-allowed data-[disabled]:opacity-50',\n          /* Resets */\n          'focus-visible:outline-none',\n          className,\n        ),\n      )}\n      {...props}\n    />\n  );\n}\n\n/**\n * Props for the GroveTextField component.\n *\n * @typedef {Object} GroveTextFieldProps\n * @property {string} [label] - The label for the text field.\n * @property {string} [description] - The description for the text field.\n * @property {string | ((validation: AriaValidationResult) => string)} [errorMessage] - The error message for the text field.\n * @property {boolean} [textArea] - Indicates if the text field is a textarea.\n * @property {AriaTextFieldProps} [AriaTextFieldProps] - Additional props for the AriaTextField component.\n */\ntype GroveTextFieldProps = {\n  label?: string;\n  description?: string;\n  errorMessage?: string | ((validation: AriaValidationResult) => string);\n  textArea?: boolean;\n} & AriaTextFieldProps;\n\n/**\n * Renders a custom text field component.\n *\n * @component\n * @param {GroveTextFieldProps} props - The props for the GroveTextField component.\n * @param {string} [props.label] - The label for the text field.\n * @param {string} [props.description] - The description for the text field.\n * @param {string | ((validation: AriaValidationResult) => string)} [props.errorMessage] - The error message for the text field.\n * @param {boolean} [props.textArea] - Indicates if the text field is a textarea.\n * @param {string} [props.className] - The class name for the text field.\n * @returns {JSX.Element} The rendered GroveTextField component.\n */\nfunction GroveTextField({\n  label,\n  description,\n  errorMessage,\n  textArea,\n  className,\n  ...props\n}: GroveTextFieldProps): JSX.Element {\n  return (\n    <TextField\n      className={composeRenderProps(className, (className) =>\n        cn('group flex flex-col gap-2', className),\n      )}\n      {...props}\n    >\n      <Label>{label}</Label>\n      {textArea ? <TextArea /> : <Input />}\n      {description && (\n        <Text className=\"text-sm text-muted-foreground\" slot=\"description\">\n          {description}\n        </Text>\n      )}\n      <FieldError>{errorMessage}</FieldError>\n    </TextField>\n  );\n}\n\nexport type { GroveTextFieldProps };\nexport { GroveTextField, Input, TextArea, TextField };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
